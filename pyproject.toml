[project]
name = "cogitarelink"
version = "0.1.0"
description = "Living Scientific Assistant: semantic web-powered research assistant with agent intelligence"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "CogitareLink Team", email = "team@cogitarelink.org"}
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research", 
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "click>=8.2.1",
    "fastcore>=1.8.2",
    "httpx>=0.28.1",
    "pydantic>=2.11.5",
    "pyld>=2.0.4",
    "pyshacl>=0.30.1",
    "rdflib>=7.1.4",
    "sparqlwrapper>=2.0.0",
    "diskcache>=5.6.3",
    "python-dateutil>=2.8.2",
    "claude-code-sdk>=0.0.10",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.0.0",
    "black>=24.0.0",
    "mypy>=1.8.0",
    "ruff>=0.1.0",
]

[project.scripts]
cl_discover = "cogitarelink.simple.cli:discover"
cl_sparql = "cogitarelink.simple.cli:sparql"
cl_materialize = "cogitarelink.cli.cl_materialize:materialize"
cl_wikidata = "cogitarelink.cli.cl_wikidata:wikidata"
cl_explain = "cogitarelink.cli.explain:main"
cl_validate = "cogitarelink.cli.validate:main"
cl_query_memory = "cogitarelink.cli.query_memory:main"
cl_resolve = "cogitarelink.cli.cl_resolve:resolve"
cl_ontfetch = "cogitarelink.simple.cli:ontfetch"
cl_describe = "cogitarelink.cli.cl_describe:describe"
cl_follow = "cogitarelink.cli.cl_follow:follow"
cl_property = "cogitarelink.cli.cl_property:property"
cl_orchestrate = "cogitarelink.cli.orchestrate:main"
cl_entity = "cogitarelink.simple.cli:entity"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
include = ["cogitarelink*"]
exclude = ["tests*", "llmstxt*", "docs*", "scripts*"]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=cogitarelink",
    "--cov-report=html",
    "--cov-report=term-missing",
]
testpaths = ["tests"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "interactive: Interactive tests with Claude Code",
    "slow: Slow tests (network requests, etc.)",
]
asyncio_mode = "auto"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | \.pytest_cache
  | __pycache__
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"tests/*" = ["E501"]

[tool.coverage.run]
source = ["cogitarelink"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
